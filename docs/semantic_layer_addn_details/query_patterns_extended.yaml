version: "1.0"
last_updated: "2025-10-22"

patterns:
  # ============================================
  # INSTAGRAM USER PROFILE PATTERNS
  # ============================================

  instagram_latest_profile:
    name: "Latest Instagram Profile Information"
    category: "social_media"
    description: "Retrieve the most recent Instagram profile data including followers, media count, and bio"
    use_cases:
      - "Show me my current Instagram profile"
      - "What's my latest follower count?"
      - "Get my Instagram account info"
      - "Show current Instagram stats"
    parameters:
      user_id:
        required: true
        type: "string"
    template: |
      SELECT
        username,
        name,
        followers_count,
        follows_count,
        media_count,
        website,
        biography,
        CONCAT(year, '-', month, '-', day) as snapshot_date
      FROM ps_labs_prod_processed_catalog.instagram_users
      WHERE user_id = '{user_id}'
        AND year = CAST(year(current_date) AS varchar)
        AND month = CAST(month(current_date) AS varchar)
      ORDER BY year DESC, month DESC, day DESC
      LIMIT 1
    metrics_calculated:
      - "current_followers_count"
      - "current_media_count"
      - "current_follows_count"

  instagram_follower_growth:
    name: "Instagram Follower Growth Tracking"
    category: "social_media"
    description: "Track follower count changes over time to identify growth trends"
    use_cases:
      - "Show my follower growth this month"
      - "How many followers did I gain?"
      - "Track Instagram follower changes"
      - "Show follower growth trend"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
    template: |
      SELECT
        CONCAT(year, '-', month, '-', day) as date,
        followers_count,
        media_count,
        follows_count,
        followers_count - LAG(followers_count) OVER (ORDER BY year, month, day) as follower_change
      FROM ps_labs_prod_processed_catalog.instagram_users
      WHERE user_id = '{user_id}'
        AND CAST(CONCAT(year, '-', month, '-', day) AS date) >= date_add('day', -{days}, current_date)
      ORDER BY year, month, day
    metrics_calculated:
      - "follower_growth_daily"
      - "follower_growth_total"
      - "media_count_trend"

  # ============================================
  # INSTAGRAM USER INSIGHTS PATTERNS
  # ============================================

  instagram_daily_reach_metrics:
    name: "Instagram Daily Reach and Engagement Metrics"
    category: "social_media"
    description: "Analyze daily reach, weekly reach, and monthly reach trends"
    use_cases:
      - "Show my Instagram reach for the last 30 days"
      - "What's my daily reach trend?"
      - "How many people am I reaching?"
      - "Show reach and follower metrics"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
    template: |
      SELECT
        date,
        reach as daily_reach,
        reach_week as weekly_reach,
        reach_days_28 as monthly_reach,
        follower_count,
        follower_count - LAG(follower_count) OVER (ORDER BY date) as net_followers
      FROM ps_labs_prod_processed_catalog.instagram_user_insights
      WHERE user_id = '{user_id}'
        AND CAST(date AS timestamp) >= date_add('day', -{days}, current_date)
      ORDER BY date DESC
    metrics_calculated:
      - "daily_reach"
      - "weekly_reach"
      - "monthly_reach"
      - "follower_growth"

  instagram_follower_growth_rate:
    name: "Instagram Follower Growth Rate Analysis"
    category: "social_media"
    description: "Calculate follower growth rates and identify growth acceleration"
    use_cases:
      - "Calculate my follower growth rate"
      - "What's my average daily follower gain?"
      - "Show follower growth percentage"
      - "Am I growing faster this month?"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
    template: |
      SELECT
        date,
        follower_count,
        follower_count - LAG(follower_count) OVER (ORDER BY date) as daily_change,
        CASE
          WHEN LAG(follower_count) OVER (ORDER BY date) > 0
          THEN ((CAST(follower_count AS double) - LAG(follower_count) OVER (ORDER BY date)) / LAG(follower_count) OVER (ORDER BY date)) * 100
          ELSE 0
        END as growth_rate_pct,
        reach,
        reach_week
      FROM ps_labs_prod_processed_catalog.instagram_user_insights
      WHERE user_id = '{user_id}'
        AND CAST(date AS timestamp) >= date_add('day', -{days}, current_date)
      ORDER BY date
    metrics_calculated:
      - "daily_follower_change"
      - "follower_growth_rate_percentage"
      - "reach_correlation"

  instagram_reach_to_follower_ratio:
    name: "Instagram Reach vs Follower Ratio"
    category: "social_media"
    description: "Analyze what percentage of followers you're reaching"
    use_cases:
      - "What percentage of my followers am I reaching?"
      - "Show reach to follower ratio"
      - "Am I reaching my audience effectively?"
      - "Calculate audience penetration rate"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
    template: |
      SELECT
        date,
        reach as daily_reach,
        follower_count,
        CASE
          WHEN follower_count > 0
          THEN (CAST(reach AS double) / follower_count) * 100
          ELSE 0
        END as reach_to_follower_pct,
        reach_week,
        reach_days_28
      FROM ps_labs_prod_processed_catalog.instagram_user_insights
      WHERE user_id = '{user_id}'
        AND CAST(date AS timestamp) >= date_add('day', -{days}, current_date)
      ORDER BY date DESC
      LIMIT {days}
    metrics_calculated:
      - "reach_penetration_rate"
      - "audience_engagement_rate"

  # ============================================
  # FACEBOOK ADS PERFORMANCE PATTERNS
  # ============================================

  facebook_ads_performance_by_dma:
    name: "Facebook Ads Performance by Geographic Market"
    category: "advertising"
    description: "Analyze ad performance across different DMA regions to identify best performing markets"
    use_cases:
      - "Which cities are my ads performing best in?"
      - "Show ad performance by region"
      - "What's my ROAS by geographic market?"
      - "Top performing DMAs"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
      min_spend:
        required: false
        type: "double"
        default: 10.0
      limit:
        required: false
        type: "int"
        default: 20
    template: |
      SELECT
        dma,
        COUNT(DISTINCT ad_id) as num_ads,
        SUM(spend) as total_spend,
        SUM(impressions) as total_impressions,
        SUM(clicks) as total_clicks,
        SUM(inline_link_clicks) as total_link_clicks,
        SUM(reach) as total_reach,
        AVG(cpc) as avg_cpc,
        AVG(cpm) as avg_cpm,
        AVG(ctr) as avg_ctr,
        SUM(spend) / NULLIF(SUM(inline_link_clicks), 0) as cost_per_link_click,
        SUM(inline_link_clicks) * 100.0 / NULLIF(SUM(impressions), 0) as link_ctr
      FROM ps_labs_prod_processed_catalog.facebook_ads_insights_demographics_dma_region
      WHERE user_id = '{user_id}'
        AND date_start >= date_add('day', -{days}, current_date)
      GROUP BY dma
      HAVING SUM(spend) >= {min_spend}
      ORDER BY total_spend DESC
      LIMIT {limit}
    metrics_calculated:
      - "total_spend_by_dma"
      - "cost_per_link_click"
      - "link_click_through_rate"
      - "geographic_performance"

  facebook_campaign_performance_summary:
    name: "Facebook Campaign Performance Overview"
    category: "advertising"
    description: "High-level campaign performance metrics aggregated across all ads and ad sets"
    use_cases:
      - "Show my campaign performance"
      - "Which campaigns are spending the most?"
      - "Campaign ROI analysis"
      - "Best performing campaigns"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
      limit:
        required: false
        type: "int"
        default: 10
    template: |
      SELECT
        campaign_name,
        objective,
        COUNT(DISTINCT ad_id) as num_ads,
        COUNT(DISTINCT adset_id) as num_adsets,
        SUM(spend) as total_spend,
        SUM(impressions) as total_impressions,
        SUM(reach) as total_reach,
        SUM(clicks) as total_clicks,
        SUM(inline_link_clicks) as total_link_clicks,
        AVG(frequency) as avg_frequency,
        SUM(spend) / NULLIF(SUM(clicks), 0) as avg_cpc,
        SUM(spend) / NULLIF(SUM(impressions), 0) * 1000 as avg_cpm,
        SUM(clicks) * 100.0 / NULLIF(SUM(impressions), 0) as avg_ctr,
        SUM(spend) / NULLIF(SUM(inline_link_clicks), 0) as cost_per_link_click
      FROM ps_labs_prod_processed_catalog.facebook_ads_insights_demographics_dma_region
      WHERE user_id = '{user_id}'
        AND date_start >= date_add('day', -{days}, current_date)
      GROUP BY campaign_name, objective
      HAVING SUM(spend) > 0
      ORDER BY total_spend DESC
      LIMIT {limit}
    metrics_calculated:
      - "campaign_spend"
      - "campaign_reach"
      - "campaign_cpc"
      - "campaign_ctr"
      - "cost_efficiency"

  facebook_ad_quality_analysis:
    name: "Facebook Ad Quality Score Analysis"
    category: "advertising"
    description: "Analyze ad quality, engagement, and conversion rankings to identify optimization opportunities"
    use_cases:
      - "Which ads have low quality scores?"
      - "Show me ads that need improvement"
      - "Ad quality ranking analysis"
      - "Find underperforming ads"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
      min_spend:
        required: false
        type: "double"
        default: 10.0
    template: |
      SELECT
        ad_name,
        campaign_name,
        quality_ranking,
        engagement_rate_ranking,
        conversion_rate_ranking,
        SUM(spend) as total_spend,
        SUM(impressions) as total_impressions,
        SUM(clicks) as total_clicks,
        AVG(ctr) as avg_ctr,
        AVG(frequency) as avg_frequency
      FROM ps_labs_prod_processed_catalog.facebook_ads_insights_demographics_dma_region
      WHERE user_id = '{user_id}'
        AND date_start >= date_add('day', -{days}, current_date)
        AND quality_ranking IS NOT NULL
      GROUP BY ad_name, campaign_name, quality_ranking, engagement_rate_ranking, conversion_rate_ranking
      HAVING SUM(spend) >= {min_spend}
      ORDER BY
        CASE quality_ranking
          WHEN 'BELOW_AVERAGE' THEN 3
          WHEN 'AVERAGE' THEN 2
          WHEN 'ABOVE_AVERAGE' THEN 1
          ELSE 4
        END DESC,
        total_spend DESC
      LIMIT 20
    metrics_calculated:
      - "quality_score_distribution"
      - "ads_needing_optimization"

  facebook_daily_ad_spend_trend:
    name: "Facebook Daily Ad Spend Trend"
    category: "advertising"
    description: "Track daily ad spend and performance metrics over time"
    use_cases:
      - "Show daily ad spend"
      - "Ad spend trend analysis"
      - "How much am I spending per day?"
      - "Daily advertising budget tracking"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
    template: |
      SELECT
        date_start as date,
        COUNT(DISTINCT campaign_id) as active_campaigns,
        COUNT(DISTINCT ad_id) as active_ads,
        SUM(spend) as daily_spend,
        SUM(impressions) as daily_impressions,
        SUM(clicks) as daily_clicks,
        SUM(inline_link_clicks) as daily_link_clicks,
        SUM(reach) as daily_reach,
        AVG(frequency) as avg_frequency
      FROM ps_labs_prod_processed_catalog.facebook_ads_insights_demographics_dma_region
      WHERE user_id = '{user_id}'
        AND date_start >= date_add('day', -{days}, current_date)
      GROUP BY date_start
      ORDER BY date_start DESC
    metrics_calculated:
      - "daily_ad_spend"
      - "daily_reach"
      - "daily_frequency"
      - "spend_trend"

  # ============================================
  # GOOGLE ANALYTICS E-COMMERCE PATTERNS
  # ============================================

  ga_top_selling_products:
    name: "Top Selling Products by Revenue"
    category: "analytics"
    description: "Identify best-selling products based on revenue and purchase volume"
    use_cases:
      - "What are my best-selling products?"
      - "Top products by revenue"
      - "Show bestsellers"
      - "Which products generate the most revenue?"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
      limit:
        required: false
        type: "int"
        default: 20
    template: |
      SELECT
        itemname,
        SUM(itemrevenue) as total_revenue,
        SUM(itemspurchased) as total_purchases,
        SUM(itemsviewed) as total_views,
        SUM(itemsaddedtocart) as total_add_to_carts,
        SUM(itemrevenue) / NULLIF(SUM(itemspurchased), 0) as revenue_per_purchase,
        AVG(purchasetoviewrate) as avg_conversion_rate,
        AVG(carttoviewrate) as avg_add_to_cart_rate
      FROM ps_labs_prod_processed_catalog.google_analytics_ecommerce_purchases_item_name_report
      WHERE user_id = '{user_id}'
        AND CAST(date AS integer) >= CAST(format_datetime(date_add('day', -{days}, current_date), 'yyyyMMdd') AS integer)
      GROUP BY itemname
      HAVING SUM(itemrevenue) > 0
      ORDER BY total_revenue DESC
      LIMIT {limit}
    metrics_calculated:
      - "total_revenue"
      - "revenue_per_purchase"
      - "conversion_rate"
      - "bestseller_ranking"

  ga_product_conversion_funnel:
    name: "Product Conversion Funnel Analysis"
    category: "analytics"
    description: "Analyze conversion funnel from product views to purchases, identifying drop-off points"
    use_cases:
      - "Show conversion funnel for products"
      - "Where are customers dropping off?"
      - "Product funnel analysis"
      - "View to purchase conversion rate"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
      min_views:
        required: false
        type: "int"
        default: 10
      limit:
        required: false
        type: "int"
        default: 50
    template: |
      SELECT
        itemname,
        SUM(itemsviewed) as total_views,
        SUM(itemsaddedtocart) as total_add_to_carts,
        SUM(itemspurchased) as total_purchases,
        SUM(itemrevenue) as total_revenue,
        -- View to Cart conversion
        SUM(itemsaddedtocart) * 100.0 / NULLIF(SUM(itemsviewed), 0) as view_to_cart_rate,
        -- Cart to Purchase conversion
        CASE
          WHEN SUM(itemsaddedtocart) > 0
          THEN SUM(itemspurchased) * 100.0 / SUM(itemsaddedtocart)
          ELSE 0
        END as cart_to_purchase_rate,
        -- Overall conversion
        SUM(itemspurchased) * 100.0 / NULLIF(SUM(itemsviewed), 0) as view_to_purchase_rate,
        -- Revenue metrics
        SUM(itemrevenue) / NULLIF(SUM(itemspurchased), 0) as avg_order_value,
        SUM(itemrevenue) / NULLIF(SUM(itemsviewed), 0) as revenue_per_view
      FROM ps_labs_prod_processed_catalog.google_analytics_ecommerce_purchases_item_name_report
      WHERE user_id = '{user_id}'
        AND CAST(date AS integer) >= CAST(format_datetime(date_add('day', -{days}, current_date), 'yyyyMMdd') AS integer)
      GROUP BY itemname
      HAVING SUM(itemsviewed) >= {min_views}
      ORDER BY total_revenue DESC
      LIMIT {limit}
    metrics_calculated:
      - "view_to_cart_conversion"
      - "cart_to_purchase_conversion"
      - "overall_conversion_rate"
      - "funnel_drop_off_points"
      - "average_order_value"

  ga_underperforming_products:
    name: "Underperforming Products with High Views"
    category: "analytics"
    description: "Identify products getting views but not converting to purchases"
    use_cases:
      - "Which products have low conversion rates?"
      - "Products with views but no sales"
      - "Find underperforming items"
      - "Products that need optimization"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
      min_views:
        required: false
        type: "int"
        default: 20
      max_conversion_rate:
        required: false
        type: "double"
        default: 5.0
      limit:
        required: false
        type: "int"
        default: 20
    template: |
      SELECT
        itemname,
        SUM(itemsviewed) as total_views,
        SUM(itemsaddedtocart) as total_add_to_carts,
        SUM(itemspurchased) as total_purchases,
        AVG(carttoviewrate) * 100 as avg_add_to_cart_rate,
        AVG(purchasetoviewrate) * 100 as avg_conversion_rate,
        SUM(itemrevenue) as total_revenue
      FROM ps_labs_prod_processed_catalog.google_analytics_ecommerce_purchases_item_name_report
      WHERE user_id = '{user_id}'
        AND CAST(date AS integer) >= CAST(format_datetime(date_add('day', -{days}, current_date), 'yyyyMMdd') AS integer)
      GROUP BY itemname
      HAVING SUM(itemsviewed) >= {min_views}
        AND AVG(purchasetoviewrate) * 100 < {max_conversion_rate}
      ORDER BY total_views DESC
      LIMIT {limit}
    metrics_calculated:
      - "low_conversion_products"
      - "optimization_opportunities"

  ga_daily_ecommerce_trend:
    name: "Daily E-commerce Performance Trend"
    category: "analytics"
    description: "Track daily e-commerce metrics including revenue, views, and conversions"
    use_cases:
      - "Show daily sales trend"
      - "Daily revenue analysis"
      - "E-commerce performance over time"
      - "Track daily conversion rates"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
    template: |
      SELECT
        startdate as date,
        COUNT(DISTINCT itemname) as unique_items,
        SUM(itemrevenue) as daily_revenue,
        SUM(itemsviewed) as daily_views,
        SUM(itemsaddedtocart) as daily_add_to_carts,
        SUM(itemspurchased) as daily_purchases,
        SUM(itemrevenue) / NULLIF(SUM(itemspurchased), 0) as avg_order_value,
        SUM(itemspurchased) * 100.0 / NULLIF(SUM(itemsviewed), 0) as daily_conversion_rate,
        SUM(itemsaddedtocart) * 100.0 / NULLIF(SUM(itemsviewed), 0) as daily_add_to_cart_rate
      FROM ps_labs_prod_processed_catalog.google_analytics_ecommerce_purchases_item_name_report
      WHERE user_id = '{user_id}'
        AND CAST(date AS integer) >= CAST(format_datetime(date_add('day', -{days}, current_date), 'yyyyMMdd') AS integer)
      GROUP BY startdate
      ORDER BY startdate DESC
    metrics_calculated:
      - "daily_revenue"
      - "daily_conversion_rate"
      - "daily_aov"
      - "revenue_trend"

  ga_product_performance_comparison:
    name: "Product Performance Comparison"
    category: "analytics"
    description: "Compare performance metrics across products to identify winners and losers"
    use_cases:
      - "Compare product performance"
      - "Which products convert better?"
      - "Product performance benchmarking"
      - "Winners vs losers analysis"
    parameters:
      user_id:
        required: true
        type: "string"
      days:
        required: false
        type: "int"
        default: 30
      min_views:
        required: false
        type: "int"
        default: 10
    template: |
      WITH product_stats AS (
        SELECT
          itemname,
          SUM(itemsviewed) as views,
          SUM(itemsaddedtocart) as carts,
          SUM(itemspurchased) as purchases,
          SUM(itemrevenue) as revenue,
          AVG(purchasetoviewrate) * 100 as conversion_rate
        FROM ps_labs_prod_processed_catalog.google_analytics_ecommerce_purchases_item_name_report
        WHERE user_id = '{user_id}'
          AND CAST(date AS integer) >= CAST(format_datetime(date_add('day', -{days}, current_date), 'yyyyMMdd') AS integer)
        GROUP BY itemname
        HAVING SUM(itemsviewed) >= {min_views}
      ),
      benchmarks AS (
        SELECT
          AVG(conversion_rate) as avg_conversion_rate,
          AVG(revenue / NULLIF(purchases, 0)) as avg_revenue_per_purchase
        FROM product_stats
      )
      SELECT
        p.itemname,
        p.views,
        p.carts,
        p.purchases,
        p.revenue,
        p.conversion_rate,
        p.revenue / NULLIF(p.purchases, 0) as revenue_per_purchase,
        p.conversion_rate - b.avg_conversion_rate as conversion_vs_avg,
        CASE
          WHEN p.conversion_rate > b.avg_conversion_rate * 1.2 THEN 'Winner'
          WHEN p.conversion_rate < b.avg_conversion_rate * 0.8 THEN 'Needs Improvement'
          ELSE 'Average'
        END as performance_category
      FROM product_stats p
      CROSS JOIN benchmarks b
      ORDER BY p.revenue DESC
    metrics_calculated:
      - "conversion_rate_benchmarking"
      - "performance_categorization"
      - "winners_and_losers"

# ============================================
# PATTERN MATCHING KEYWORDS
# ============================================

pattern_matching:
  keywords:
    # Instagram User Profile
    profile: ["instagram_latest_profile"]
    followers: ["instagram_latest_profile", "instagram_follower_growth", "instagram_follower_growth_rate"]
    growth: ["instagram_follower_growth", "instagram_follower_growth_rate"]
    instagram_account: ["instagram_latest_profile"]

    # Instagram User Insights
    reach: ["instagram_daily_reach_metrics", "instagram_reach_to_follower_ratio"]
    engagement: ["instagram_daily_reach_metrics", "instagram_reach_to_follower_ratio"]
    penetration: ["instagram_reach_to_follower_ratio"]

    # Facebook Ads
    facebook: ["facebook_ads_performance_by_dma", "facebook_campaign_performance_summary"]
    dma: ["facebook_ads_performance_by_dma"]
    geographic: ["facebook_ads_performance_by_dma"]
    campaign: ["facebook_campaign_performance_summary", "facebook_daily_ad_spend_trend"]
    quality: ["facebook_ad_quality_analysis"]
    ad_spend: ["facebook_campaign_performance_summary", "facebook_daily_ad_spend_trend"]

    # Google Analytics
    bestsellers: ["ga_top_selling_products"]
    revenue: ["ga_top_selling_products", "ga_daily_ecommerce_trend"]
    funnel: ["ga_product_conversion_funnel"]
    conversion: ["ga_product_conversion_funnel", "ga_underperforming_products"]
    underperforming: ["ga_underperforming_products"]
    ecommerce: ["ga_daily_ecommerce_trend", "ga_top_selling_products"]
    products: ["ga_product_performance_comparison", "ga_top_selling_products"]

  question_patterns:
    - pattern: ".*(follower|instagram).*grow.*"
      suggested_patterns: ["instagram_follower_growth", "instagram_follower_growth_rate"]

    - pattern: ".*(reach|engagement).*"
      suggested_patterns: ["instagram_daily_reach_metrics", "instagram_reach_to_follower_ratio"]

    - pattern: ".*(best|top).*sell.*"
      suggested_patterns: ["ga_top_selling_products"]

    - pattern: ".*(conversion|funnel).*"
      suggested_patterns: ["ga_product_conversion_funnel"]

    - pattern: ".*(dma|region|geo|city|market).*"
      suggested_patterns: ["facebook_ads_performance_by_dma"]

    - pattern: ".*(campaign|ad).*performance.*"
      suggested_patterns: ["facebook_campaign_performance_summary"]

    - pattern: ".*(quality|ranking|score).*ad.*"
      suggested_patterns: ["facebook_ad_quality_analysis"]

    - pattern: ".*underperform.*"
      suggested_patterns: ["ga_underperforming_products", "facebook_ad_quality_analysis"]

    - pattern: ".*(daily|trend).*revenue.*"
      suggested_patterns: ["ga_daily_ecommerce_trend"]

    - pattern: ".*(compare|comparison).*product.*"
      suggested_patterns: ["ga_product_performance_comparison"]

  # ============================================
  # INSTAGRAM USER LIFETIME INSIGHTS PATTERNS
  # ============================================

  instagram_follower_demographics_age:
    name: "Instagram Follower Age Demographics"
    category: "social_media"
    description: "Analyze follower distribution by age groups to understand audience demographics"
    use_cases:
      - "What's the age breakdown of my Instagram followers?"
      - "Show me follower demographics by age group"
      - "Which age groups follow me on Instagram?"
      - "Analyze my Instagram audience age distribution"
    parameters:
      user_id:
        required: true
        type: "string"
    template: |
      SELECT
        u.username,
        u.name,
        u.followers_count as total_followers,
        age_data.key as age_group,
        CAST(age_data.value AS integer) as follower_count,
        ROUND(CAST(age_data.value AS double) / u.followers_count * 100, 2) as percentage,
        l.glue_processed_at as data_refreshed_at
      FROM ps_labs_prod_processed_catalog.instagram_user_lifetime_insights l
      CROSS JOIN UNNEST(CAST(json_parse(l.value) AS map(varchar, varchar))) as age_data(key, value)
      INNER JOIN ps_labs_prod_processed_catalog.instagram_users u
        ON l.business_account_id = u.id AND l.user_id = u.user_id
      WHERE l.user_id = '{user_id}'
        AND l.breakdown = 'age,gender'
      ORDER BY
        CASE age_data.key
          WHEN '13-17' THEN 1
          WHEN '18-24' THEN 2
          WHEN '25-34' THEN 3
          WHEN '35-44' THEN 4
          WHEN '45-54' THEN 5
          WHEN '55-64' THEN 6
          WHEN '65+' THEN 7
          ELSE 99
        END
    metrics_calculated:
      - "age_distribution"
      - "follower_percentage_by_age"

  instagram_follower_demographics_country:
    name: "Instagram Follower Country Distribution"
    category: "social_media"
    description: "Identify top countries where your Instagram followers are located"
    use_cases:
      - "Which countries are my Instagram followers from?"
      - "Show me top countries by follower count"
      - "Where is my Instagram audience located geographically?"
      - "Analyze follower distribution by country"
    parameters:
      user_id:
        required: true
        type: "string"
      limit:
        required: false
        type: "int"
        default: 10
    template: |
      SELECT
        u.username,
        u.name,
        u.followers_count as total_followers,
        country_data.key as country,
        CAST(country_data.value AS integer) as follower_count,
        ROUND(CAST(country_data.value AS double) / u.followers_count * 100, 2) as percentage,
        l.glue_processed_at as data_refreshed_at
      FROM ps_labs_prod_processed_catalog.instagram_user_lifetime_insights l
      CROSS JOIN UNNEST(CAST(json_parse(l.value) AS map(varchar, varchar))) as country_data(key, value)
      INNER JOIN ps_labs_prod_processed_catalog.instagram_users u
        ON l.business_account_id = u.id AND l.user_id = u.user_id
      WHERE l.user_id = '{user_id}'
        AND l.breakdown = 'country'
      ORDER BY follower_count DESC
      LIMIT {limit}
    metrics_calculated:
      - "country_distribution"
      - "top_markets"
      - "geographic_reach"

  instagram_follower_demographics_city:
    name: "Instagram Follower City Distribution"
    category: "social_media"
    description: "Identify top cities where your Instagram followers are located"
    use_cases:
      - "Which cities have the most Instagram followers?"
      - "Show me follower distribution by city"
      - "Where are my Instagram followers located by city?"
      - "Top cities for my Instagram audience"
    parameters:
      user_id:
        required: true
        type: "string"
      limit:
        required: false
        type: "int"
        default: 10
    template: |
      SELECT
        u.username,
        u.name,
        u.followers_count as total_followers,
        city_data.key as city,
        CAST(city_data.value AS integer) as follower_count,
        ROUND(CAST(city_data.value AS double) / u.followers_count * 100, 2) as percentage,
        l.glue_processed_at as data_refreshed_at
      FROM ps_labs_prod_processed_catalog.instagram_user_lifetime_insights l
      CROSS JOIN UNNEST(CAST(json_parse(l.value) AS map(varchar, varchar))) as city_data(key, value)
      INNER JOIN ps_labs_prod_processed_catalog.instagram_users u
        ON l.business_account_id = u.id AND l.user_id = u.user_id
      WHERE l.user_id = '{user_id}'
        AND l.breakdown = 'city'
      ORDER BY follower_count DESC
      LIMIT {limit}
    metrics_calculated:
      - "city_distribution"
      - "urban_concentration"
      - "local_markets"

  instagram_audience_demographics_summary:
    name: "Instagram Complete Audience Demographics Summary"
    category: "social_media"
    description: "Comprehensive view of all follower demographics (age, country, city) in one query"
    use_cases:
      - "Show me complete follower demographics"
      - "Give me a full breakdown of my Instagram audience"
      - "Analyze my entire Instagram audience demographics"
    parameters:
      user_id:
        required: true
        type: "string"
      top_n:
        required: false
        type: "int"
        default: 5
    template: |
      WITH age_breakdown AS (
        SELECT
          'age' as breakdown_type,
          age_data.key as segment,
          CAST(age_data.value AS integer) as follower_count
        FROM ps_labs_prod_processed_catalog.instagram_user_lifetime_insights
        CROSS JOIN UNNEST(CAST(json_parse(value) AS map(varchar, varchar))) as age_data(key, value)
        WHERE user_id = '{user_id}' AND breakdown = 'age,gender'
      ),
      country_breakdown AS (
        SELECT
          'country' as breakdown_type,
          country_data.key as segment,
          CAST(country_data.value AS integer) as follower_count,
          ROW_NUMBER() OVER (ORDER BY CAST(country_data.value AS integer) DESC) as rn
        FROM ps_labs_prod_processed_catalog.instagram_user_lifetime_insights
        CROSS JOIN UNNEST(CAST(json_parse(value) AS map(varchar, varchar))) as country_data(key, value)
        WHERE user_id = '{user_id}' AND breakdown = 'country'
      ),
      city_breakdown AS (
        SELECT
          'city' as breakdown_type,
          city_data.key as segment,
          CAST(city_data.value AS integer) as follower_count,
          ROW_NUMBER() OVER (ORDER BY CAST(city_data.value AS integer) DESC) as rn
        FROM ps_labs_prod_processed_catalog.instagram_user_lifetime_insights
        CROSS JOIN UNNEST(CAST(json_parse(value) AS map(varchar, varchar))) as city_data(key, value)
        WHERE user_id = '{user_id}' AND breakdown = 'city'
      )
      SELECT * FROM age_breakdown
      UNION ALL
      SELECT breakdown_type, segment, follower_count FROM country_breakdown WHERE rn <= {top_n}
      UNION ALL
      SELECT breakdown_type, segment, follower_count FROM city_breakdown WHERE rn <= {top_n}
      ORDER BY breakdown_type, follower_count DESC
    metrics_calculated:
      - "complete_demographic_profile"
      - "audience_segmentation"

# ============================================
# UPDATED PATTERN MATCHING KEYWORDS
# ============================================

pattern_matching:
  keywords:
    # Instagram User Profile
    profile: ["instagram_latest_profile"]
    followers: ["instagram_latest_profile", "instagram_follower_growth", "instagram_follower_growth_rate"]
    growth: ["instagram_follower_growth", "instagram_follower_growth_rate"]
    instagram_account: ["instagram_latest_profile"]

    # Instagram User Insights
    reach: ["instagram_daily_reach_metrics", "instagram_reach_to_follower_ratio"]

    # Instagram User Lifetime Insights (NEW)
    demographics: ["instagram_follower_demographics_age", "instagram_follower_demographics_country", "instagram_follower_demographics_city", "instagram_audience_demographics_summary"]
    age: ["instagram_follower_demographics_age"]
    country: ["instagram_follower_demographics_country"]
    city: ["instagram_follower_demographics_city"]
    audience: ["instagram_audience_demographics_summary", "instagram_follower_demographics_age"]
    geographic: ["instagram_follower_demographics_country", "instagram_follower_demographics_city"]
    location: ["instagram_follower_demographics_country", "instagram_follower_demographics_city"]

  question_patterns:
    - pattern: ".*(age|demographic|audience).*breakdown.*"
      suggested_patterns: ["instagram_follower_demographics_age", "instagram_audience_demographics_summary"]

    - pattern: ".*(country|countries|geographic|location).*follower.*"
      suggested_patterns: ["instagram_follower_demographics_country"]

    - pattern: ".*(city|cities).*follower.*"
      suggested_patterns: ["instagram_follower_demographics_city"]

    - pattern: ".*(complete|full|entire).*demographic.*"
      suggested_patterns: ["instagram_audience_demographics_summary"]
