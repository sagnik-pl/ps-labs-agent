version: "2.0"
last_updated: "2025-01-27"

tables:
  instagram_media:
    stream_type: "instagram"
    stream_name: "media"
    description: "Instagram media posts including images, videos, carousel albums, and reels. Contains post metadata such as captions, timestamps, permalinks, and media types. Updated daily via Airbyte ingestion. CRITICAL: This is a FULL REFRESH snapshot table containing ALL media posts from the beginning of time (not just recent posts). The 'timestamp' column represents when each post was originally published on Instagram. To analyze posts from a specific time period, filter by the 'timestamp' column (e.g., timestamp >= date_add('day', -30, current_date)). For performance metrics (reach, likes, engagement), you MUST join with instagram_media_insights."
    category: "social_media"
    use_cases:
      - "What are my top performing posts this month by engagement?"
      - "How many posts have I published by media type (IMAGE, VIDEO, REELS)?"
      - "What posts were published in a specific time period?"
      - "Analyze posting frequency and patterns over time"
      - "Join with media_insights to get detailed performance metrics"

    columns:
      id:
        name: "id"
        type: "string"
        description: "Unique Instagram media ID (format: 17841234567890123)"
        example_values: ["17841234567890123", "18123456789012345", "17987654321098765"]
        primary_key: true
        required: true
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        notes: "This is Instagram's internal media ID. Use for joins with instagram_media_insights on the id column."

      media_type:
        name: "media_type"
        type: "string"
        description: "Type of Instagram media post"
        example_values: ["IMAGE", "VIDEO", "CAROUSEL_ALBUM"]
        distinct_values: ["IMAGE", "VIDEO", "CAROUSEL_ALBUM", "REELS"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: true
        common_filters:
          - "media_type = 'REELS'"
          - "media_type IN ('IMAGE', 'CAROUSEL_ALBUM')"
          - "media_type = 'VIDEO'"
        notes: "REELS are a subset of VIDEO type but tracked separately for analytics. Use this to segment content analysis by format."

      thumbnail_url:
        name: "thumbnail_url"
        type: "string"
        description: "URL to the media thumbnail image hosted on Instagram CDN"
        example_values: ["https://scontent.cdninstagram.com/v/t51.29350-15/123456789_123456789.jpg", "https://instagram.fnyc1-1.fna.fbcdn.net/v/t51.2885-15/987654321_98765.jpg"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: false
        important: false
        notes: "URLs are temporary and may expire. Use for display purposes only, not for long-term storage."

      caption:
        name: "caption"
        type: "string"
        description: "Post caption text including hashtags and mentions"
        example_values: ["Check out our new product! #launch #excited @brand", "Beautiful sunset ðŸŒ… #nature #photography", ""]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        common_filters:
          - "caption LIKE '%#hashtag%'"
          - "caption LIKE '%@mention%'"
          - "caption IS NOT NULL AND caption != ''"
        notes: "May be NULL or empty string for media without captions. Use LIKE for hashtag or mention searches."

      timestamp:
        name: "timestamp"
        type: "timestamp"
        description: "When the post was published on Instagram (UTC timezone, ISO 8601 format)"
        example_values: ["2024-01-15 14:30:00.000", "2024-12-25 09:15:30.000", "2024-06-01 18:45:00.000"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: true
        common_filters:
          - "timestamp >= date_add('day', -30, current_date)"
          - "timestamp BETWEEN '2024-01-01' AND '2024-12-31'"
          - "timestamp >= TIMESTAMP '2024-01-01 00:00:00'"
        used_in_metrics: ["posting_frequency", "time_of_day_analysis"]
        notes: "Use for time-based analysis and trend detection. Stored in UTC timezone."

      permalink:
        name: "permalink"
        type: "string"
        description: "Permanent URL to view the post on Instagram"
        example_values: ["https://www.instagram.com/p/ABC123DEF45/", "https://www.instagram.com/p/XYZ789GHI01/"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: false
        notes: "Stable URL that won't expire. Use for linking back to Instagram from reports or dashboards."

      username:
        name: "username"
        type: "string"
        description: "Instagram handle/username (without @ symbol)"
        example_values: ["photosphere_official", "brandname", "influencer123"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        common_filters:
          - "username = 'photosphere_official'"
        notes: "Join with instagram_users table on username to get account-level information like followers_count."

      user_id:
        name: "user_id"
        type: "string"
        description: "Internal user ID for data isolation (partition key) - this is PhotoSphere's user ID, not Instagram's"
        example_values: ["RxdH8RrVoNNao4dqRlHVXc3mvRh2", "AbC123XyZ456DeF789"]
        required: true
        filter_required: true
        aggregatable: false
        searchable: true
        important: true
        partition_key: true
        common_filters:
          - "user_id = '{user_id}'"
        notes: "ALWAYS filter by this for performance and data isolation. This is different from Instagram's user ID."

      year:
        name: "year"
        type: "string"
        description: "Partition column: year of post publication (YYYY format)"
        example_values: ["2024", "2023", "2025"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: false
        partition_key: true
        system_column: true
        common_filters:
          - "year = '2024'"
          - "year IN ('2023', '2024')"
        notes: "Use with month and day for partition pruning to improve query performance."

      month:
        name: "month"
        type: "string"
        description: "Partition column: month of post publication (MM format, zero-padded)"
        example_values: ["01", "06", "12"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: false
        partition_key: true
        system_column: true
        common_filters:
          - "month = '01'"
          - "year = '2024' AND month IN ('01', '02', '03')"
        notes: "Always zero-padded (01-12). Use with year and day for efficient partition filtering."

      day:
        name: "day"
        type: "string"
        description: "Partition column: day of post publication (DD format, zero-padded)"
        example_values: ["01", "15", "31"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: false
        partition_key: true
        system_column: true
        common_filters:
          - "day = '15'"
          - "year = '2024' AND month = '01' AND day >= '15'"
        notes: "Always zero-padded (01-31). Use with year and month for maximum query performance."

      glue_processed_at:
        name: "glue_processed_at"
        type: "timestamp"
        description: "When this record was processed by the Glue ETL job (UTC timezone)"
        example_values: ["2025-01-27 10:30:00.000", "2025-01-26 10:30:00.000"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: false
        system_column: true
        notes: "ETL metadata field. Use to identify when data was last refreshed."

      source:
        name: "source"
        type: "string"
        description: "Data source identifier (always 'airbyte' for this table)"
        example_values: ["airbyte"]
        distinct_values: ["airbyte"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: false
        system_column: true
        notes: "ETL metadata field. Indicates data came from Airbyte ingestion."

    primary_key: ["id"]
    partition_keys: ["user_id", "year", "month", "day"]

    common_joins:
      - table: "instagram_media_insights"
        type: "LEFT JOIN"
        on: ["id"]
        description: "Join to get detailed performance metrics (impressions, reach, engagement, shares, saves)"
        example: "LEFT JOIN instagram_media_insights ON media.id = media_insights.id AND media.user_id = media_insights.user_id"
        example_query: |
          SELECT
            m.id,
            m.caption,
            m.media_type,
            m.timestamp,
            mi.likes,
            mi.reach,
            mi.saved AS saves,
            mi.shares,
            mi.comments
          FROM ps_labs_processed_catalog.instagram_media m
          LEFT JOIN ps_labs_processed_catalog.instagram_media_insights mi
            ON m.id = mi.id
            AND m.user_id = mi.user_id
          WHERE m.user_id = '{user_id}'
            AND m.timestamp >= date_add('day', -30, current_date)
          ORDER BY mi.reach DESC
          LIMIT 10

      - table: "instagram_users"
        type: "INNER JOIN"
        on: ["username", "user_id"]
        description: "Join to get account-level information (followers_count, follows_count, biography)"
        example: "INNER JOIN instagram_users ON media.username = users.username AND media.user_id = users.user_id"
        example_query: |
          SELECT
            u.username,
            u.followers_count,
            u.media_count,
            COUNT(m.id) as posts_in_period,
            AVG(CASE WHEN mi.likes IS NOT NULL THEN mi.likes ELSE 0 END) as avg_likes
          FROM ps_labs_processed_catalog.instagram_users u
          INNER JOIN ps_labs_processed_catalog.instagram_media m
            ON u.username = m.username
            AND u.user_id = m.user_id
          LEFT JOIN ps_labs_processed_catalog.instagram_media_insights mi
            ON m.id = mi.id
            AND m.user_id = mi.user_id
          WHERE u.user_id = '{user_id}'
            AND m.year = '2024'
          GROUP BY u.username, u.followers_count, u.media_count

    important_notes:
      - "CRITICAL: This is a FULL REFRESH snapshot table containing ALL posts ever published (not just recent posts)"
      - "CRITICAL: To get posts from last N days, you MUST filter by timestamp: timestamp >= date_add('day', -N, current_date)"
      - "CRITICAL: For ANY metrics (reach, likes, engagement), you MUST join with instagram_media_insights"
      - "CRITICAL: This table only has post metadata (caption, type, timestamp) - NO engagement metrics"
      - "ALWAYS filter by user_id for performance and data isolation - this is critical for query performance"
      - "Use partition keys (year, month, day) in WHERE clause for optimal performance"
      - "The 'id' field is Instagram's media ID - use for joins with instagram_media_insights"
      - "media_type values: IMAGE, VIDEO, CAROUSEL_ALBUM, REELS (REELS are tracked separately from VIDEO)"
      - "timestamp is in UTC timezone - convert to user's local timezone if needed for reporting"
      - "caption may be NULL or empty string - always check both conditions"

    example_queries:
      - description: "Get top 10 posts by reach in last 30 days (requires join with media_insights)"
        sql: |
          SELECT
            m.id,
            m.caption,
            m.media_type,
            m.timestamp,
            mi.reach,
            mi.likes,
            mi.comments
          FROM ps_labs_processed_catalog.instagram_media m
          LEFT JOIN ps_labs_processed_catalog.instagram_media_insights mi
            ON m.id = mi.id
            AND m.user_id = mi.user_id
          WHERE m.user_id = '{user_id}'
            AND m.timestamp >= date_add('day', -30, current_date)
          ORDER BY mi.reach DESC NULLS LAST
          LIMIT 10

      - description: "Count posts by media type for 2024"
        sql: |
          SELECT
            media_type,
            COUNT(*) as post_count,
            COUNT(DISTINCT DATE(timestamp)) as days_posted
          FROM ps_labs_processed_catalog.instagram_media
          WHERE user_id = '{user_id}'
            AND year = '2024'
          GROUP BY media_type
          ORDER BY post_count DESC

      - description: "Get all posts with specific hashtag"
        sql: |
          SELECT
            id,
            caption,
            media_type,
            timestamp,
            permalink
          FROM ps_labs_processed_catalog.instagram_media
          WHERE user_id = '{user_id}'
            AND caption LIKE '%#productlaunch%'
            AND year = '2024'
          ORDER BY timestamp DESC


  instagram_media_insights:
    stream_type: "instagram"
    stream_name: "media_insights"
    description: "Detailed performance metrics for individual Instagram posts including impressions, reach, engagement, saves, and shares. Updated daily via Airbyte. CRITICAL: This table has NO timestamp column. To filter by post publication date, you MUST join with instagram_media and filter by media.timestamp. Never query this table alone for time-based analysis."
    category: "social_media"
    use_cases:
      - "What is the reach and engagement for my top performing posts?"
      - "Calculate engagement rate (likes + comments + shares + saves) / reach"
      - "Analyze REELS performance metrics (avg watch time, total view time)"
      - "Compare performance across different media types"
      - "Track post performance trends over time"

    columns:
      id:
        name: "id"
        type: "string"
        description: "Instagram media ID - matches the id in instagram_media table"
        example_values: ["17841234567890123", "18123456789012345", "17987654321098765"]
        primary_key: true
        required: true
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        notes: "Use for joins with instagram_media table on id column. This is the foreign key relationship."

      page_id:
        name: "page_id"
        type: "string"
        description: "Facebook Page ID connected to the Instagram Business Account"
        example_values: ["123456789012345", "987654321098765"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "Links Instagram to Facebook Business Manager. Use for cross-platform analysis."

      business_account_id:
        name: "business_account_id"
        type: "string"
        description: "Instagram Business Account ID"
        example_values: ["17841234567890123", "17987654321098765"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "Instagram's internal business account identifier."

      likes:
        name: "likes"
        type: "bigint"
        description: "Number of likes on the post"
        example_values: ["150", "2500", "42"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "likes > 100"
          - "likes >= 1000"
        used_in_metrics: ["engagement_rate", "total_engagement"]
        notes: "Use in engagement rate calculations: (likes + comments + shares + saved) / reach * 100"

      reach:
        name: "reach"
        type: "bigint"
        description: "Number of unique accounts that saw the post"
        example_values: ["5000", "15000", "500"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "reach > 1000"
          - "reach >= 10000"
        used_in_metrics: ["engagement_rate", "reach_rate"]
        notes: "This is UNIQUE accounts. Different from impressions (total views including duplicates). Use as denominator for engagement rate."

      saved:
        name: "saved"
        type: "bigint"
        description: "Number of times the post was saved/bookmarked by users"
        example_values: ["25", "150", "5"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "saved > 10"
        used_in_metrics: ["engagement_rate", "save_rate"]
        notes: "High saves indicate valuable/educational content. Use in engagement calculations."

      shares:
        name: "shares"
        type: "bigint"
        description: "Number of times the post was shared via DM or to Stories"
        example_values: ["30", "200", "8"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "shares > 20"
        used_in_metrics: ["engagement_rate", "virality_score"]
        notes: "High shares indicate viral or relatable content. Use in engagement calculations."

      follows:
        name: "follows"
        type: "bigint"
        description: "Number of new followers gained from this specific post"
        example_values: ["10", "50", "2"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "follows > 5"
        used_in_metrics: ["follower_growth", "post_conversion_rate"]
        notes: "Tracks follower acquisition by individual post. High values indicate compelling content that drives follows."

      comments:
        name: "comments"
        type: "bigint"
        description: "Number of comments on the post"
        example_values: ["45", "300", "12"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "comments > 10"
        used_in_metrics: ["engagement_rate", "comment_rate"]
        notes: "High comments indicate engaging content that sparks conversation. Use in engagement calculations."

      profile_visits:
        name: "profile_visits"
        type: "bigint"
        description: "Number of profile visits driven by this post"
        example_values: ["100", "500", "25"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "profile_visits > 50"
        used_in_metrics: ["profile_visit_rate"]
        notes: "Indicates post drove interest in the account. Use to identify content that attracts profile exploration."

      ig_reels_avg_watch_time:
        name: "ig_reels_avg_watch_time"
        type: "double"
        description: "Average watch time for REELS in milliseconds"
        example_values: ["15000.5", "8500.25", "22000.0"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        only_for_media_type: "REELS"
        common_filters:
          - "ig_reels_avg_watch_time > 10000"
        used_in_metrics: ["avg_watch_time_seconds", "completion_rate"]
        notes: "REELS only - NULL for other media types. Divide by 1000 to get seconds. Higher values indicate engaging video content."

      ig_reels_video_view_total_time:
        name: "ig_reels_video_view_total_time"
        type: "double"
        description: "Total watch time for REELS across all views in milliseconds"
        example_values: ["150000.5", "500000.0", "75000.25"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        only_for_media_type: "REELS"
        common_filters:
          - "ig_reels_video_view_total_time > 100000"
        used_in_metrics: ["total_watch_hours", "average_completion"]
        notes: "REELS only - NULL for other media types. Divide by 1000 to get seconds, by 60000 for minutes. Sum across posts for total watch time."

      user_id:
        name: "user_id"
        type: "string"
        description: "Internal user ID for data isolation (partition key)"
        example_values: ["RxdH8RrVoNNao4dqRlHVXc3mvRh2", "AbC123XyZ456DeF789"]
        required: true
        filter_required: true
        aggregatable: false
        searchable: true
        important: true
        partition_key: true
        common_filters:
          - "user_id = '{user_id}'"
        notes: "ALWAYS filter by this for performance and data isolation."

      year:
        name: "year"
        type: "string"
        description: "Partition column: year (YYYY format)"
        example_values: ["2024", "2023", "2025"]
        required: true
        partition_key: true
        system_column: true

      month:
        name: "month"
        type: "string"
        description: "Partition column: month (MM format, zero-padded)"
        example_values: ["01", "06", "12"]
        required: true
        partition_key: true
        system_column: true

      day:
        name: "day"
        type: "string"
        description: "Partition column: day (DD format, zero-padded)"
        example_values: ["01", "15", "31"]
        required: true
        partition_key: true
        system_column: true

      glue_processed_at:
        name: "glue_processed_at"
        type: "timestamp"
        description: "When this record was processed by the Glue ETL job"
        required: true
        system_column: true

      source:
        name: "source"
        type: "string"
        description: "Data source identifier (always 'airbyte')"
        example_values: ["airbyte"]
        required: true
        system_column: true

    primary_key: ["id"]
    partition_keys: ["user_id", "year", "month", "day"]

    common_joins:
      - table: "instagram_media"
        type: "INNER JOIN"
        on: ["id"]
        description: "Join to get post metadata (caption, media_type, timestamp, permalink)"
        example: "INNER JOIN instagram_media ON media_insights.id = media.id AND media_insights.user_id = media.user_id"
        example_query: |
          SELECT
            m.id,
            m.caption,
            m.media_type,
            m.timestamp,
            mi.reach,
            mi.likes,
            mi.comments,
            mi.saved,
            mi.shares,
            (mi.likes + mi.comments + mi.saved + mi.shares) * 100.0 / NULLIF(mi.reach, 0) as engagement_rate
          FROM ps_labs_processed_catalog.instagram_media_insights mi
          INNER JOIN ps_labs_processed_catalog.instagram_media m
            ON mi.id = m.id
            AND mi.user_id = m.user_id
          WHERE mi.user_id = '{user_id}'
            AND mi.reach > 1000
            AND m.year = '2024'
          ORDER BY engagement_rate DESC
          LIMIT 10

    important_notes:
      - "CRITICAL: This table has NO timestamp column - you MUST join with instagram_media to filter by post publish date"
      - "CRITICAL: NEVER query this table alone for time-based analysis - always join with instagram_media first"
      - "CRITICAL: To filter by time, use: JOIN instagram_media m ON ... WHERE m.timestamp >= date_add('day', -30, current_date)"
      - "CRITICAL: DO NOT use partition columns (year, month, day) for user-facing time filters - these are ETL processing dates, not post publish dates"
      - "ALWAYS join with instagram_media to get post context (caption, media_type, timestamp)"
      - "ALWAYS filter by user_id for performance and data isolation"
      - "Engagement rate formula: (likes + comments + shares + saved) / reach * 100"
      - "ig_reels_avg_watch_time and ig_reels_video_view_total_time are ONLY for REELS - NULL for other types"
      - "Watch times are in milliseconds - divide by 1000 for seconds, by 60000 for minutes"
      - "reach is UNIQUE accounts, different from impressions (total views)"
      - "Use NULLIF when dividing by reach to avoid division by zero errors"

    example_queries:
      - description: "Calculate engagement rate for top performing posts"
        sql: |
          SELECT
            m.id,
            m.caption,
            m.media_type,
            mi.reach,
            mi.likes,
            mi.comments,
            mi.saved,
            mi.shares,
            (mi.likes + mi.comments + mi.saved + mi.shares) * 100.0 / NULLIF(mi.reach, 0) as engagement_rate_pct
          FROM ps_labs_processed_catalog.instagram_media_insights mi
          INNER JOIN ps_labs_processed_catalog.instagram_media m
            ON mi.id = m.id
            AND mi.user_id = m.user_id
          WHERE mi.user_id = '{user_id}'
            AND mi.reach > 0
            AND m.timestamp >= date_add('day', -30, current_date)
          ORDER BY engagement_rate_pct DESC
          LIMIT 20

      - description: "Analyze REELS performance by average watch time"
        sql: |
          SELECT
            m.id,
            m.caption,
            m.timestamp,
            mi.reach,
            mi.ig_reels_avg_watch_time / 1000.0 as avg_watch_time_seconds,
            mi.ig_reels_video_view_total_time / 60000.0 as total_watch_time_minutes
          FROM ps_labs_processed_catalog.instagram_media_insights mi
          INNER JOIN ps_labs_processed_catalog.instagram_media m
            ON mi.id = m.id
            AND mi.user_id = m.user_id
          WHERE mi.user_id = '{user_id}'
            AND m.media_type = 'REELS'
            AND mi.ig_reels_avg_watch_time IS NOT NULL
            AND m.year = '2024'
          ORDER BY avg_watch_time_seconds DESC
          LIMIT 10


  instagram_user_insights:
    stream_type: "instagram"
    stream_name: "user_insights"
    description: "Daily account-level insights including reach, follower count, and online followers timing. Updated daily via Airbyte. Use for tracking overall account performance and audience growth trends."
    category: "social_media"
    use_cases:
      - "Track daily follower growth and reach trends"
      - "Analyze account reach over different time periods (daily, weekly, 28-day)"
      - "Identify when followers are most active online"
      - "Monitor overall account health and growth metrics"
      - "Compare account performance across time periods"

    columns:
      date:
        name: "date"
        type: "string"
        description: "Date of the insight snapshot (stored as timestamp string: YYYY-MM-DD HH:MM:SS format)"
        example_values: ["2024-01-15 07:00:00", "2024-12-25 08:00:00", "2024-06-30 07:00:00"]
        primary_key: true
        required: true
        filter_required: false
        aggregatable: false
        searchable: false
        important: true
        common_filters:
          - "SUBSTR(date, 1, 10) >= '2024-01-01'"
          - "SUBSTR(date, 1, 10) BETWEEN '2024-01-01' AND '2024-12-31'"
          - "date_parse(SUBSTR(date, 1, 10), '%Y-%m-%d') >= date_add('day', -30, current_date)"
        notes: "Daily snapshot - one row per day. Use for time series analysis. CRITICAL: This table uses 'date' column (NOT 'timestamp'). instagram_user_insights has ONLY 'date', NOT 'timestamp'. For date filtering on instagram_user_insights, always use the 'date' column with SUBSTR(date, 1, 10) to extract YYYY-MM-DD portion before date comparisons."

      reach:
        name: "reach"
        type: "bigint"
        description: "Number of unique accounts that saw any content from this account on this day"
        example_values: ["10000", "25000", "5000"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "reach > 5000"
        used_in_metrics: ["daily_reach_trend", "reach_growth"]
        notes: "Daily reach - unique accounts reached that day. Compare with reach_week and reach_days_28 for broader trends."

      page_id:
        name: "page_id"
        type: "string"
        description: "Facebook Page ID connected to the Instagram Business Account"
        example_values: ["123456789012345", "987654321098765"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "Links Instagram to Facebook Business Manager."

      reach_week:
        name: "reach_week"
        type: "bigint"
        description: "Number of unique accounts reached in the last 7 days (rolling window)"
        example_values: ["50000", "75000", "30000"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "reach_week > 25000"
        used_in_metrics: ["weekly_reach_trend"]
        notes: "Rolling 7-day window. Use to smooth out daily volatility and identify weekly trends."

      reach_days_28:
        name: "reach_days_28"
        type: "bigint"
        description: "Number of unique accounts reached in the last 28 days (rolling window)"
        example_values: ["150000", "200000", "100000"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "reach_days_28 > 100000"
        used_in_metrics: ["monthly_reach_trend"]
        notes: "Rolling 28-day window. Use for monthly performance analysis and reporting."

      follower_count:
        name: "follower_count"
        type: "bigint"
        description: "Total number of followers at the end of this day"
        example_values: ["25000", "50000", "10000"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "follower_count > 10000"
        used_in_metrics: ["follower_growth", "follower_growth_rate"]
        notes: "Point-in-time snapshot. Calculate growth with LAG window function: follower_count - LAG(follower_count) OVER (ORDER BY date)"

      online_followers:
        name: "online_followers"
        type: "string"
        description: "JSON string with hourly breakdown of when followers are online"
        example_values: ["{\"0\":150,\"1\":100,\"2\":75,\"8\":500,\"12\":800,\"18\":1200}", "{\"9\":300,\"13\":600,\"20\":900}"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: false
        important: true
        notes: "JSON format with hour (0-23) as key and online follower count as value. Parse JSON to identify best posting times. Hour is in UTC timezone."

      business_account_id:
        name: "business_account_id"
        type: "string"
        description: "Instagram Business Account ID"
        example_values: ["17841234567890123", "17987654321098765"]
        required: false
        aggregatable: false
        searchable: true
        important: false

      user_id:
        name: "user_id"
        type: "string"
        description: "Internal user ID for data isolation (partition key)"
        example_values: ["RxdH8RrVoNNao4dqRlHVXc3mvRh2", "AbC123XyZ456DeF789"]
        required: true
        filter_required: true
        aggregatable: false
        searchable: true
        important: true
        partition_key: true
        common_filters:
          - "user_id = '{user_id}'"
        notes: "ALWAYS filter by this for performance."

      year:
        name: "year"
        type: "string"
        description: "Partition column: year (YYYY)"
        required: true
        partition_key: true
        system_column: true

      month:
        name: "month"
        type: "string"
        description: "Partition column: month (MM, zero-padded)"
        required: true
        partition_key: true
        system_column: true

      day:
        name: "day"
        type: "string"
        description: "Partition column: day (DD, zero-padded)"
        required: true
        partition_key: true
        system_column: true

      glue_processed_at:
        name: "glue_processed_at"
        type: "timestamp"
        description: "When this record was processed by Glue"
        required: true
        system_column: true

      source:
        name: "source"
        type: "string"
        description: "Data source (always 'airbyte')"
        required: true
        system_column: true

    primary_key: ["date", "user_id"]
    partition_keys: ["user_id", "year", "month", "day"]

    common_joins:
      - table: "instagram_users"
        type: "INNER JOIN"
        on: ["user_id", "year", "month", "day"]
        description: "Join to get account profile information alongside daily metrics"
        example: "INNER JOIN instagram_users ON user_insights.user_id = users.user_id AND user_insights.year = users.year"
        example_query: |
          SELECT
            ui.date,
            u.username,
            ui.follower_count,
            ui.reach,
            ui.reach_week,
            ui.reach_days_28,
            ui.follower_count - LAG(ui.follower_count) OVER (ORDER BY ui.date) as daily_follower_growth
          FROM ps_labs_processed_catalog.instagram_user_insights ui
          INNER JOIN ps_labs_processed_catalog.instagram_users u
            ON ui.user_id = u.user_id
            AND ui.year = u.year
            AND ui.month = u.month
            AND ui.day = u.day
          WHERE ui.user_id = '{user_id}'
            AND CAST(ui.date AS DATE) >= date_add('day', -30, current_date)
          ORDER BY ui.date DESC

    important_notes:
      - "ALWAYS filter by user_id for performance"
      - "One row per day per account - use 'date' column for time series analysis"
      - "follower_count is end-of-day snapshot - use LAG function to calculate growth"
      - "online_followers is JSON - requires parsing to extract hourly data"
      - "reach, reach_week, reach_days_28 are rolling windows - not cumulative"
      - "Use partition keys (year, month, day) for performance"

    example_queries:
      - description: "Calculate daily follower growth for last 30 days"
        sql: |
          SELECT
            date,
            follower_count,
            follower_count - LAG(follower_count) OVER (ORDER BY date) as daily_growth,
            reach,
            reach_week
          FROM ps_labs_processed_catalog.instagram_user_insights
          WHERE user_id = '{user_id}'
            AND CAST(date AS DATE) >= date_add('day', -30, current_date)
          ORDER BY date DESC

      - description: "Track weekly reach trends"
        sql: |
          SELECT
            date,
            reach as daily_reach,
            reach_week as weekly_reach,
            reach_days_28 as monthly_reach,
            follower_count
          FROM ps_labs_processed_catalog.instagram_user_insights
          WHERE user_id = '{user_id}'
            AND year = '2024'
            AND month = '01'
          ORDER BY date DESC


  instagram_user_lifetime_insights:
    stream_type: "instagram"
    stream_name: "user_lifetime_insights"
    description: "Lifetime account metrics with demographic breakdowns including audience age, gender, country, and city distribution. Updated periodically via Airbyte. Use for understanding audience composition and demographics."
    category: "social_media"
    use_cases:
      - "Analyze follower demographics by age range and gender"
      - "Understand geographic distribution of audience (country and city)"
      - "Track audience composition changes over time"
      - "Segment content strategy based on primary audience demographics"
      - "Export demographic data for reporting and analysis"

    columns:
      metric:
        name: "metric"
        type: "string"
        description: "Name of the demographic or audience metric"
        example_values: ["audience_country", "audience_city", "audience_gender_age", "follower_demographics"]
        distinct_values: ["audience_country", "audience_city", "audience_gender_age", "audience_locale", "follower_demographics"]
        primary_key: true
        required: true
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        common_filters:
          - "metric = 'audience_country'"
          - "metric = 'audience_gender_age'"
          - "metric IN ('audience_country', 'audience_city')"
        notes: "Each metric type represents different demographic dimension. Filter by specific metric to analyze that dimension."

      value:
        name: "value"
        type: "string"
        description: "Numeric value or count for the metric (stored as string, convert to int for calculations)"
        example_values: ["1500", "2500", "500"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: false
        important: true
        notes: "Stored as string - cast to INT or BIGINT for calculations. Represents count of followers matching the breakdown criteria."

      breakdown:
        name: "breakdown"
        type: "string"
        description: "Demographic segment identifier (e.g., 'US', 'M.25-34', 'New York')"
        example_values: ["US", "M.25-34", "F.18-24", "New York", "en_US"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        common_filters:
          - "breakdown LIKE 'US'"
          - "breakdown LIKE 'M.%'"
          - "breakdown LIKE 'F.%'"
        notes: "Format varies by metric type. Gender-age: 'M.25-34', 'F.18-24'. Country: 'US', 'GB', 'CA'. City: 'New York', 'Los Angeles'. Parse accordingly."

      page_id:
        name: "page_id"
        type: "string"
        description: "Facebook Page ID connected to Instagram Business Account"
        example_values: ["123456789012345", "987654321098765"]
        required: false
        aggregatable: false
        searchable: true
        important: false

      business_account_id:
        name: "business_account_id"
        type: "string"
        description: "Instagram Business Account ID"
        example_values: ["17841234567890123", "17987654321098765"]
        required: false
        aggregatable: false
        searchable: true
        important: false

      user_id:
        name: "user_id"
        type: "string"
        description: "Internal user ID for data isolation (partition key)"
        example_values: ["RxdH8RrVoNNao4dqRlHVXc3mvRh2", "AbC123XyZ456DeF789"]
        required: true
        filter_required: true
        aggregatable: false
        searchable: true
        important: true
        partition_key: true
        common_filters:
          - "user_id = '{user_id}'"
        notes: "ALWAYS filter by this."

      year:
        name: "year"
        type: "string"
        description: "Partition column: year (YYYY)"
        required: true
        partition_key: true
        system_column: true

      month:
        name: "month"
        type: "string"
        description: "Partition column: month (MM)"
        required: true
        partition_key: true
        system_column: true

      day:
        name: "day"
        type: "string"
        description: "Partition column: day (DD)"
        required: true
        partition_key: true
        system_column: true

      glue_processed_at:
        name: "glue_processed_at"
        type: "timestamp"
        description: "When processed by Glue"
        required: true
        system_column: true

      source:
        name: "source"
        type: "string"
        description: "Data source (always 'airbyte')"
        required: true
        system_column: true

    primary_key: ["metric", "breakdown", "user_id"]
    partition_keys: ["user_id", "year", "month", "day"]

    common_joins:
      - table: "instagram_user_insights"
        type: "LEFT JOIN"
        on: ["user_id", "year", "month", "day"]
        description: "Join to correlate demographic data with daily reach and follower metrics"
        example: "LEFT JOIN instagram_user_insights ON lifetime.user_id = insights.user_id"
        example_query: |
          SELECT
            lt.metric,
            lt.breakdown,
            CAST(lt.value AS BIGINT) as follower_count,
            ui.follower_count as total_followers,
            CAST(lt.value AS DOUBLE) * 100.0 / NULLIF(ui.follower_count, 0) as percentage
          FROM ps_labs_processed_catalog.instagram_user_lifetime_insights lt
          LEFT JOIN ps_labs_processed_catalog.instagram_user_insights ui
            ON lt.user_id = ui.user_id
            AND lt.year = ui.year
            AND lt.month = ui.month
            AND lt.day = ui.day
          WHERE lt.user_id = '{user_id}'
            AND lt.metric = 'audience_country'
            AND lt.year = '2024'
          ORDER BY CAST(lt.value AS BIGINT) DESC
          LIMIT 10

    important_notes:
      - "ALWAYS filter by user_id for performance"
      - "value column is STRING - must CAST to INT or BIGINT for numeric operations"
      - "breakdown format varies by metric type - parse accordingly"
      - "Gender-age format: 'M.25-34' (Male, 25-34 years), 'F.18-24' (Female, 18-24 years)"
      - "Use LIKE patterns to filter by gender: breakdown LIKE 'M.%' for males, 'F.%' for females"
      - "Multiple rows per metric type - each row represents a different demographic segment"

    example_queries:
      - description: "Get top 10 countries by follower count"
        sql: |
          SELECT
            breakdown as country,
            CAST(value AS BIGINT) as follower_count
          FROM ps_labs_processed_catalog.instagram_user_lifetime_insights
          WHERE user_id = '{user_id}'
            AND metric = 'audience_country'
            AND year = '2024'
          ORDER BY CAST(value AS BIGINT) DESC
          LIMIT 10

      - description: "Analyze audience by age and gender"
        sql: |
          SELECT
            CASE
              WHEN breakdown LIKE 'M.%' THEN 'Male'
              WHEN breakdown LIKE 'F.%' THEN 'Female'
              ELSE 'Unknown'
            END as gender,
            SUBSTRING(breakdown, 3) as age_range,
            CAST(value AS BIGINT) as follower_count
          FROM ps_labs_processed_catalog.instagram_user_lifetime_insights
          WHERE user_id = '{user_id}'
            AND metric = 'audience_gender_age'
            AND year = '2024'
          ORDER BY CAST(value AS BIGINT) DESC


  instagram_users:
    stream_type: "instagram"
    stream_name: "users"
    description: "Instagram Business Account profile information including username, biography, follower counts, and media count. Updated when profile changes are detected via Airbyte. Use for current account state and profile metadata."
    category: "social_media"
    use_cases:
      - "Get current account profile information (username, bio, followers)"
      - "Track follower and following count trends over time"
      - "Monitor media count growth"
      - "Join with media or insights tables to enrich data with account context"
      - "Export profile information for reporting"

    columns:
      id:
        name: "id"
        type: "string"
        description: "Instagram Business Account ID (Instagram's internal ID)"
        example_values: ["17841234567890123", "17987654321098765"]
        primary_key: true
        required: true
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        notes: "This is Instagram's internal account ID, different from user_id partition key."

      name:
        name: "name"
        type: "string"
        description: "Account display name (can be different from username)"
        example_values: ["PhotoSphere Labs", "Brand Name Inc", "Influencer Display Name"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "Display name shown on profile - can contain spaces and special characters."

      username:
        name: "username"
        type: "string"
        description: "Instagram handle/username (without @ symbol)"
        example_values: ["photosphere_official", "brandname", "influencer123"]
        required: true
        filter_required: false
        aggregatable: false
        searchable: true
        important: true
        common_filters:
          - "username = 'photosphere_official'"
        notes: "Unique Instagram handle. Use for joins with instagram_media on username column."

      ig_id:
        name: "ig_id"
        type: "bigint"
        description: "Instagram ID (numeric format)"
        example_values: ["123456789012345", "987654321098765"]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "Alternative Instagram ID format (numeric). Less commonly used than id field."

      page_id:
        name: "page_id"
        type: "string"
        description: "Facebook Page ID connected to this Instagram Business Account"
        example_values: ["123456789012345", "987654321098765"]
        required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "Links Instagram to Facebook Business Manager."

      website:
        name: "website"
        type: "string"
        description: "Website URL from Instagram bio"
        example_values: ["https://www.photospherelabs.com", "https://linktr.ee/brandname", ""]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "May be empty if no website set in bio."

      biography:
        name: "biography"
        type: "string"
        description: "Instagram bio text"
        example_values: ["Digital marketing agency ðŸš€ | Helping brands grow ðŸ“ˆ", "Official account for @brandname", ""]
        required: false
        filter_required: false
        aggregatable: false
        searchable: true
        important: false
        notes: "May contain emojis, hashtags, and @mentions. Can be empty."

      media_count:
        name: "media_count"
        type: "int"
        description: "Total number of media posts on the account"
        example_values: ["500", "1200", "50"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "media_count > 100"
        used_in_metrics: ["content_growth", "posting_frequency"]
        notes: "Total posts published. Compare over time to track content creation pace."

      follows_count:
        name: "follows_count"
        type: "int"
        description: "Number of accounts this account follows"
        example_values: ["250", "1000", "100"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: false
        common_filters:
          - "follows_count < 500"
        notes: "Outbound follows. Use for follower/following ratio analysis."

      followers_count:
        name: "followers_count"
        type: "int"
        description: "Total number of followers"
        example_values: ["25000", "50000", "10000"]
        required: false
        filter_required: false
        aggregatable: true
        searchable: false
        important: true
        common_filters:
          - "followers_count > 10000"
        used_in_metrics: ["follower_growth", "follower_following_ratio"]
        notes: "Point-in-time snapshot. For growth trends, compare across dates or use instagram_user_insights."

      profile_picture_url:
        name: "profile_picture_url"
        type: "string"
        description: "URL to account profile picture"
        example_values: ["https://scontent.cdninstagram.com/v/t51.2885-19/123456789_123.jpg"]
        required: false
        aggregatable: false
        searchable: false
        important: false
        notes: "URLs may expire. Use for display purposes only."

      user_id:
        name: "user_id"
        type: "string"
        description: "Internal user ID for data isolation (partition key)"
        example_values: ["RxdH8RrVoNNao4dqRlHVXc3mvRh2", "AbC123XyZ456DeF789"]
        required: true
        filter_required: true
        aggregatable: false
        searchable: true
        important: true
        partition_key: true
        common_filters:
          - "user_id = '{user_id}'"
        notes: "ALWAYS filter by this. Different from Instagram's id field."

      year:
        name: "year"
        type: "string"
        description: "Partition column: year (YYYY)"
        required: true
        partition_key: true
        system_column: true

      month:
        name: "month"
        type: "string"
        description: "Partition column: month (MM)"
        required: true
        partition_key: true
        system_column: true

      day:
        name: "day"
        type: "string"
        description: "Partition column: day (DD)"
        required: true
        partition_key: true
        system_column: true

      glue_processed_at:
        name: "glue_processed_at"
        type: "timestamp"
        description: "When processed by Glue"
        required: true
        system_column: true

      source:
        name: "source"
        type: "string"
        description: "Data source (always 'airbyte')"
        required: true
        system_column: true

    primary_key: ["id"]
    partition_keys: ["user_id", "year", "month", "day"]

    common_joins:
      - table: "instagram_media"
        type: "INNER JOIN"
        on: ["username", "user_id"]
        description: "Join to get all posts for this account"
        example: "INNER JOIN instagram_media ON users.username = media.username AND users.user_id = media.user_id"
        example_query: |
          SELECT
            u.username,
            u.followers_count,
            u.media_count as total_media,
            COUNT(m.id) as posts_in_period,
            AVG(CASE WHEN m.media_type = 'REELS' THEN 1.0 ELSE 0.0 END) * 100 as reels_percentage
          FROM ps_labs_processed_catalog.instagram_users u
          INNER JOIN ps_labs_processed_catalog.instagram_media m
            ON u.username = m.username
            AND u.user_id = m.user_id
          WHERE u.user_id = '{user_id}'
            AND m.year = '2024'
          GROUP BY u.username, u.followers_count, u.media_count

      - table: "instagram_user_insights"
        type: "INNER JOIN"
        on: ["user_id", "year", "month", "day"]
        description: "Join to get daily performance metrics alongside profile information"
        example: "INNER JOIN instagram_user_insights ON users.user_id = insights.user_id"
        example_query: |
          SELECT
            u.username,
            u.name,
            u.biography,
            ui.date,
            ui.follower_count as daily_followers,
            ui.reach as daily_reach,
            u.followers_count as profile_followers
          FROM ps_labs_processed_catalog.instagram_users u
          INNER JOIN ps_labs_processed_catalog.instagram_user_insights ui
            ON u.user_id = ui.user_id
            AND u.year = ui.year
            AND u.month = ui.month
            AND u.day = ui.day
          WHERE u.user_id = '{user_id}'
            AND CAST(ui.date AS DATE) >= date_add('day', -7, current_date)
          ORDER BY ui.date DESC

    important_notes:
      - "ALWAYS filter by user_id for performance"
      - "Don't confuse 'id' (Instagram's account ID) with 'user_id' (PhotoSphere partition key)"
      - "followers_count is point-in-time - use instagram_user_insights for historical trends"
      - "Use username for joins with instagram_media"
      - "To get latest profile, use: ORDER BY year DESC, month DESC, day DESC LIMIT 1"

    example_queries:
      - description: "Get latest profile information"
        sql: |
          SELECT
            id,
            username,
            name,
            biography,
            followers_count,
            follows_count,
            media_count,
            website
          FROM ps_labs_processed_catalog.instagram_users
          WHERE user_id = '{user_id}'
          ORDER BY year DESC, month DESC, day DESC
          LIMIT 1

      - description: "Calculate follower/following ratio"
        sql: |
          SELECT
            username,
            followers_count,
            follows_count,
            CAST(followers_count AS DOUBLE) / NULLIF(follows_count, 0) as follower_ratio,
            media_count
          FROM ps_labs_processed_catalog.instagram_users
          WHERE user_id = '{user_id}'
          ORDER BY year DESC, month DESC, day DESC
          LIMIT 1
